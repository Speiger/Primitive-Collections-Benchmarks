plugins {
	id "me.champeau.jmh" version "0.6.7"
//  id "me.champeau.gradle.jmh" version "0.5.3"
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'

    group = 'me.champeau.sample'
    version = '1.0-SNAPSHOT'

    sourceCompatibility = 17
    targetCompatibility = 17

    repositories {
        mavenCentral()
        maven {
        	url = "https://maven.speiger.com/repository/main"
    	}
   		flatDir {
       		dirs 'libs'
   		}
    }
    dependencies {
		implementation 'com.google.code.gson:gson:2.10.1'
    	implementation 'de.speiger:Primitive-Collections:0.8.0'
    	implementation 'it.unimi.dsi:fastutil:8.5.12'
    	implementation 'org.eclipse.collections:eclipse-collections:11.1.0'
    	implementation 'com.carrotsearch:hppc:0.9.1'
		implementation 'io.quickchart:QuickChart:1.2.0'
		implementation 'com.koloboke:koloboke-impl-jdk8:1.0.0'
		
    	
//		compile fileTree(dir: 'libs', include: '*.jar') //So I can test fixes without having to upload them all the time...
	}
}


apply plugin: 'me.champeau.jmh'
compileJava.options.encoding = "UTF-8"

jmh {
    includes = [
//		JMH since Java17 doesn't support multiple includes just 1
		'speiger\\.src\\.collections\\.impl\\.*'
//    	'speiger\\.src\\.collections\\.impl\\.pc\\.*', 
//    	'speiger\\.src\\.collections\\.impl\\.fastutil\\.*', 
//    	'speiger\\.src\\.collections\\.impl\\.eclipse\\.*', 
//    	'speiger\\.src\\.collections\\.impl\\.hppc\\.*', 
//    	'speiger\\.src\\.collections\\.impl\\.koloboke\\.*', 
//    	'speiger\\.src\\.collections\\.impl\\.java\\.*'
    ]
    humanOutputFile = null
    resultFormat = 'json'
    warmupIterations = 2
    iterations = 5
    timeOnIteration = '2s'
    warmup = '3s'
    fork = 1
    operationsPerInvocation = 5
    threads = 2
}

// it is possible to tweak the jmhJar task directly
jmhJar.baseName = 'custom'

task generateFancyStatistics(type: JavaExec) {
	group = 'internal'
	description = 'Fancifies the Benchmark Results'
    classpath = sourceSets.main.runtimeClasspath
    main = 'speiger.src.BenchmarkMapper'
    args = ['build/reports/jmh/results.json', 'FancyResults.md']
}

task generateFancyFolderStatistics(type: JavaExec) {
	group = 'internal'
	description = 'Fancifies the Benchmark Results from a Folder'
    classpath = sourceSets.main.runtimeClasspath
    main = 'speiger.src.BenchmarkMapper'
    args = ['build/reports/collections', 'FancyResults.md']
}

task splitStatistics(type: JavaExec) {
	group = 'internal'
	description = 'Splits statistics into each category so it can be merged later'
    classpath = sourceSets.main.runtimeClasspath
    main = 'speiger.src.BenchmarkSplitter'
    args = ['build/results/jmh/results.json', 'build/reports/collections']
}
